define lan_iface = "eth0"
define lan_ip    = <LAN_IP>
define lan_net   = <LAN_NET>
define lan_ports = { 2666, 3427, 3674 }

define guest_iface   = "eth1"
define guest_ip      = 10.0.0.<ID>
define guest_clients = 10.0.0.0/22

define wan_iface = "eth2"
define wan_ip    = <WAN_IP>

define hyperv_ip   = <HYPERV_IP>
define hyperv_net  = <HYPERV_NET>
define hyperv_port = 3389

flush ruleset

table ip filter {
    chain input {
        type filter hook input priority 0;
        policy drop;
        icmp type echo-request accept;
        iifname $lan_iface ip saddr $lan_net ip daddr $lan_ip tcp dport $lan_ports accept;
        iifname $guest_iface ip daddr 255.255.255.255 udp sport 68 udp dport 67 accept;
        iifname $guest_iface ip saddr $guest_clients ip daddr $guest_ip udp sport 68 udp dport 67 accept;
    }
    chain forward {
        type filter hook forward priority 0;
        policy drop;
        ct state related,established accept;
        iifname $guest_iface ct state new ip daddr != { 10.0.0.0/8, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 192.168.0.0/16 } accept;
        iifname $wan_iface ip saddr $hyperv_net ip daddr $hyperv_ip tcp dport $hyperv_port ct state new log prefix "hyper-v-connection: " accept;
    }
    chain output {
        type filter hook output priority 0;
        policy drop;
        icmp type echo-reply accept;
        oifname $lan_iface ip protocol tcp ip saddr $lan_ip ip daddr $lan_net tcp sport $lan_ports accept;
        oifname $guest_iface ip saddr $guest_ip ip daddr $guest_clients udp sport 67 udp dport 68 accept;
    }
}

table ip nat {
    chain prerouting {
        type nat hook prerouting priority -100;
        policy accept;
        iifname $wan_iface ip daddr $wan_ip tcp dport $hyperv_port dnat to $hyperv_ip;
    }
    chain postrouting {
        type nat hook postrouting priority 100;
        policy accept;
        oifname $lan_iface ip daddr $hyperv_ip tcp dport $hyperv_port snat to $lan_ip;
        oifname $wan_iface snat to $wan_ip;
    }
}
